<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--密码校验器-->
    <bean id="userCredentials" class="com.song.shiro.credentials.UserCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!--realm域-->
    <bean id="userRealm" class="com.song.shiro.realm.UserRealm">
        <property name="credentialsMatcher" ref="userCredentials"/>
        <property name="cachingEnabled" value="false"/>
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!--securityManager-->
    <!--默认使用servlet容器的会话-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!--过滤器-->
    <!--基于Form表单的身份验证过滤器-->
    <bean id="formAuthenticationFilter" class="com.song.shiro.filter.CustomFormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/login"/>
    </bean>

    <!--废弃-->
    <!--<bean id="userFilter" class="com.song.shiro.filter.UserFilter"/>-->

    <!--过滤被踢出的session,重定向到-->
    <bean id="kickOutSessionControlFilter" class="com.song.shiro.filter.KickOutSessionControlFilter">
        <property name="redirectUrl" value="/login"/>
    </bean>

    <!-- Shiro的Web过滤器 -->
    <!--用户进入"/"的访问路径:首先会通过user过滤器,这时由于未登录,会被重定向到loginUrl对应的登录路径;然后访问该路径时,又经过了authc过滤器,会根据
        配置的usernameParam,passwordParam,rememberMeParam执行登录操作,登录失败,会跳转到loginUrl的登录路径,登录成功,会重定向到之前请求的路径"/"-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--当时用user过滤器时拦截指定url时,如果未登录,会自动跳转到登录路径-->
        <property name="loginUrl" value="/login"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <!--本过滤器的功能是访问指定路径时,获取用户的身份(前提是用户已成功登录),然后根据身份获取用户对象,将对象放到requst域中.本过滤器需设置到过滤器拦截链的user过滤器后面
                  注:该方式并不好,因为每次请求指定的拦截路径,都会查一次数据库,因此最好是重写表单登录验证过滤器,当登录成功时,将用户对象放到session中-->
                <!--<entry key="sysUser" value-ref="userFilter"/>-->
                <entry key="kickOut" value-ref="kickOutSessionControlFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <!--多个过滤器放一起，表示一次通过-->
            <value>
                /login = authc
                /logout = logout
                /authenticated = authc
                /** = kickOut,user
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--用来存放登陆的session-->
    <bean class="com.song.listener.LocalHttpSessionContext"/>
</beans>